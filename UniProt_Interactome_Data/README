# Arguments [defaults] -> Can be abbreviated to shortest unambiguous prefixes

###########################################################

# Accessing and Processing UniProt data files

1] Grab the latest UniProt data with:
  % wget https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.dat.gz

2] Parse UniProt data to produce output file with:
  % gunzip -c uniprot_sprot.dat.gz | python3 Uniprot_parser.py > Uniprot_output.tsv


###########################################################

# Accessing and processing Protein-Protein Interaction Data

1] Grab the Protein-Protein Interaction Data in miTAB format (2.5 or 2.7)

    # Get the latest BioGRID data with:
      % wget https://downloads.thebiogrid.org/Download/BioGRID/Latest-Release/BIOGRID-ORGANISM-LATEST.mitab.zip

    - Unzip with:
      % unzip BIOGRID-ORGANISM-LATEST.mitab

    - This will produce one miTAB file per Organism (Use BIOGRID-ORGANISM-Homo_sapiens*.mitab.txt for human data)


    # Get the latest IntAct data with:
      % wget ftp://ftp.ebi.ac.uk/pub/databases/intact/current/psimitab/intact.zip

    - Once downloaded, unzip with:
      % unzip intact.zip

    - This will produce 2 files (intact.txt & intact_negative.txt). Use intact.txt for further steps


2.1] Parse BioGRID data with:
    % python3 Interaction_parser.py --inInteraction BIOGRID-ORGANISM-Homo_sapiens*.mitab.txt --inUniProt Uniprot_output.tsv > Exp_Biogrid.tsv

2.2] Then, parse Intact data with:
    % python3 Interaction_parser.py --inInteraction intact.txt --inUniProt Uniprot_output.tsv > Exp_Intact.tsv

    # Description of arguments:

      --inInteraction: Protein-protein Interaction Input File name (miTAB 2.5 or 2.7)

      --inUniProt    : Output produced by Uniprot_parser.py


###########################################################

# Build High-Quality Human Interactome with:
  % python3 Build_Interactome.py --inExpFile Exp_Biogrid.tsv Exp_Intact.tsv --inUniProt Uniprot_output.tsv --inCanonicalFile canonicalTranscripts_*.tsv.gz > Interactome_human.tsv

    # Description of arguments:

      --inExpFile      :  PPI Experiments Output File(s) produced by Interaction_parser.py

      --inUniProt      :  Output produced by Uniprot_parser.py
 
      --inCanonicalFile:  Canonical Transcripts Input File name (.gz or non .gz)

    # High-Quality Interactome Criteria:

      1] Filtering Interactions based on Interaction Detection Method:
        - We filter out pull down (MI:0096), genetic interference (MI:0254) & unspecified method (MI:0686)

      2] Filtering Interactions based on Interaction Type:
        - We keep only direct interaction (MI:0407) & physical association (MI:0915)

      3] We try to eliminate most of the EXPANSION DATA, and keep only TRUE BINARY INTERACTIONS

      4] Each Interaction has ≥ 1 experiment, of which one should be proven by any BINARY METHOD


###########################################################

# For getting canonical transcript file, refer to grexome-TIMC-Secondary/Transcripts_Data/


###########################################################

# Interactome Clustering Data

- We consider Clusters with a size of >= 2 and 100 (max)

- We have tried two types of clustering methods:

  1] Kernel clustering approach (method K1) (Choobdar, Sarvenaz et al. “Assessment of network module identification across complex diseases.” Nature methods vol. 16,9 (2019): 843-852. doi:10.1038/s41592-019-0509-5)

    - To run this clustering method on the Interactome file generated by Build_Interactome.py, please use the MONET tool described at: https://github.com/BergmannLab/MONET

    - If you will be using the output of this file, then please process it using ProcessClusterFile_MONET.py script using the command:

       % cat cluster_outputFile.tsv | python3 ProcessClusterFile_MONET.py > K1Clustering_clusterFile.cls

       # Input File description:

           cluster_outputFile.tsv:    Clustering Output File produced by K1 method of MONET tool
    
  2] Randomized optimization of modularity (Didier, Gilles et al. “Identifying communities from multiplex biological networks by randomized optimization of modularity.” F1000Research vol. 7 1042. 10 Jul. 2018, doi:10.12688/f1000research.15486.2)

    - To run this clustering method on the Interactome file generated by Build_Interactome.py, please use the MolTi-DREAM tool described at: https://github.com/gilles-didier/MolTi-DREAM

    - This might generate some large cluster (i.e size > 100), in such cases, please run the tool recurscively as described at MolTi-DREAM GitHub page

    - The output produced by this tool need not be processed further and can be directly used for the 5.2_addInteractome.py script

  
- You can use of any clustering methods, but the cluster output file should contain:

    -> Header: (Ex: #ClustnSee analysis export)
    -> Followed by ClusterID (Ex: ClusterID:1||)
    -> Followed by Name(ENSG) of the Cluster(s) (Ex: ENSG00000162819)
    -> End of a given Cluster is indicated by an empty line

- Sample Cluster File Format: 

      #ClustnSee analysis export
      ClusterID:1||
      ENSG00000162819
      ENSG00000021574

      ClusterID:2||
      ENSG00000172831
      ENSG00000255112
      ENSG00000119541
      ENSG00000167232
      ENSG00000131165

      ClusterID:4||
      ENSG00000162039
      ENSG00000106302
      ENSG00000140675
      ENSG00000165805
      ENSG00000105679